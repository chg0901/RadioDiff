#!/usr/bin/env python3
"""
More thorough cleaning of mermaid diagrams to fix syntax issues
"""

import os
import re

def clean_mermaid_code_thorough(mermaid_code):
    """Thoroughly clean mermaid code to fix all syntax issues."""
    
    # Replace problematic characters in node labels
    def clean_node_label(match):
        label = match.group(1)
        # Clean the label content
        label = label.replace('‚àà', ' in ')
        label = label.replace('√ó', ' x ')
        label = label.replace('œÜ', 'phi')
        label = label.replace('Œ∏', 'theta')
        label = label.replace('Œµ', 'epsilon')
        label = label.replace('Œ±', 'alpha')
        label = label.replace('Œ≤', 'beta')
        label = label.replace('ùí©', 'N')
        label = label.replace('‚àö', 'sqrt')
        label = label.replace('‚Äñ', '||')
        label = label.replace('‚àè', 'prod')
        label = label.replace('‚àë', 'sum')
        label = label.replace('‚Üí', '->')
        label = label.replace('‚â§', '<=')
        label = label.replace('‚â•', '>=')
        label = label.replace('‚â†', '!=')
        label = label.replace('‚àû', 'inf')
        label = label.replace('‚àÇ', 'partial')
        label = label.replace('‚àá', 'nabla')
        label = label.replace('‚à´', 'int')
        label = label.replace('Œî', 'Delta')
        label = label.replace('œÄ', 'pi')
        label = label.replace('œÉ', 'sigma')
        label = label.replace('Œº', 'mu')
        label = label.replace('Œª', 'lambda')
        label = label.replace('œâ', 'omega')
        label = label.replace('œà', 'psi')
        label = label.replace('œá', 'chi')
        label = label.replace('‚Ñù', 'R')
        label = label.replace('‚Ñï', 'N')
        label = label.replace('‚Ñ§', 'Z')
        label = label.replace('‚ÑÇ', 'C')
        label = label.replace('‚Ñö', 'Q')
        label = label.replace('ùêà', 'I')
        label = label.replace('ùêì', 'T')
        label = label.replace('ùêÑ', 'E')
        label = label.replace('ùêç', 'N')
        label = label.replace('ùêÇ', 'C')
        label = label.replace('ùêä', 'K')
        label = label.replace('ùêã', 'L')
        label = label.replace('ùêå', 'M')
        label = label.replace('ùêé', 'O')
        label = label.replace('ùêè', 'P')
        label = label.replace('ùêë', 'R')
        label = label.replace('ùêí', 'S')
        label = label.replace('ùêì', 'T')
        label = label.replace('ùêî', 'U')
        label = label.replace('ùêï', 'V')
        label = label.replace('ùêñ', 'W')
        label = label.replace('ùêó', 'X')
        label = label.replace('ùêò', 'Y')
        label = label.replace('ùêô', 'Z')
        label = label.replace('ùêã', 'L')
        label = label.replace('ùêå', 'M')
        label = label.replace('ùêé', 'O')
        label = label.replace('ùêè', 'P')
        label = label.replace('ùêë', 'R')
        label = label.replace('ùêí', 'S')
        label = label.replace('ùêì', 'T')
        label = label.replace('ùêî', 'U')
        label = label.replace('ùêï', 'V')
        label = label.replace('ùêñ', 'W')
        label = label.replace('ùêó', 'X')
        label = label.replace('ùêò', 'Y')
        label = label.replace('ùêô', 'Z')
        
        # Fix mathematical notation
        label = re.sub(r'(\w+)\^\(([^)]+)\)', r'\1^\2', label)  # x^(y) -> x^y
        label = re.sub(r'(\w+)_\(([^)]+)\)', r'\1_\2', label)    # x_(y) -> x_y
        
        return f'[{label}]'
    
    # Clean node labels
    cleaned = re.sub(r'\[([^\]]+)\]', clean_node_label, mermaid_code)
    
    # Fix arrow directions
    cleaned = cleaned.replace('-->', '->')
    
    # Clean style definitions
    cleaned = re.sub(r'style\s+(\w+)\s+fill:([^,\n]+),?([^,\n]*)', lambda m: f'style {m.group(1)} fill:{m.group(2)}', cleaned)
    
    # Remove extra brackets
    cleaned = cleaned.replace(']]', ']')
    
    return cleaned

def clean_all_mermaid_files(input_dir, output_dir):
    """Clean all mermaid files in the input directory."""
    
    os.makedirs(output_dir, exist_ok=True)
    
    # Get all .mmd files
    mmd_files = [f for f in os.listdir(input_dir) if f.endswith('.mmd')]
    mmd_files.sort()
    
    print(f"Found {len(mmd_files)} mermaid files to clean")
    
    for mmd_file in mmd_files:
        input_path = os.path.join(input_dir, mmd_file)
        output_path = os.path.join(output_dir, mmd_file)
        
        print(f"Cleaning {mmd_file}...")
        
        # Read the original file
        with open(input_path, 'r') as f:
            original_content = f.read()
        
        # Clean the content
        cleaned_content = clean_mermaid_code_thorough(original_content)
        
        # Write the cleaned version
        with open(output_path, 'w') as f:
            f.write(cleaned_content)
        
        print(f"‚úÖ Cleaned: {output_path}")

def main():
    input_dir = 'radiodiff_standardized_report_mermaid'
    output_dir = 'radiodiff_standardized_report_mermaid_final'
    
    print("üßπ RadioDiff Standardized Report Mermaid Cleaner (Thorough)")
    print("=" * 60)
    
    # Clean all mermaid files
    print(f"\nCleaning mermaid files...")
    clean_all_mermaid_files(input_dir, output_dir)
    
    print(f"\n‚úÖ Complete! All diagrams cleaned to {output_dir}/")
    print("üìÅ Cleaned files:")
    
    # List cleaned files
    for file in sorted(os.listdir(output_dir)):
        if file.endswith('.mmd'):
            print(f"   - {output_dir}/{file}")

if __name__ == "__main__":
    main()